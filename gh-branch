#!/bin/bash
set -e

help() {
  cat <<EOF
Usage: gh branch

Displays an interactive branch switcher that lists local branches in relation
to the pull requests in the repository. The selected branch is checked out.

Use \`-r\` to include remote branches.

With \`--static\`, print a non-interactive list of branches.

Dependencies: fzf
EOF
# You can also select multiple branches with Tab and press Ctrl-D to delete them.
}

static=
while [ $# -gt 0 ]; do
  case "$1" in
  -h|--help)
    help
    exit 0
    ;;
  -r|--remote)
    remote=1
    ;;
  --static)
    static=1
    ;;
  *)
    help >&2
    exit 1
    ;;
  esac
  shift
done

branch_info() {
  if [ -n "$remote" ]; then
    git for-each-ref 'refs/heads/**' 'refs/remotes/**' --format='%(refname:short)%09%(committerdate:unix)%09%(committerdate:relative)%09%(HEAD)' | strip_remote | grep -v '^HEAD' | sort -u -k1,1
  else
    git for-each-ref 'refs/heads/**' --format='%(refname:short)%09%(committerdate:unix)%09%(committerdate:relative)%09%(HEAD)'
  fi
}

strip_remote() {
  local branches
  branches="$(cat)"
  for r in $(git remote); do
    branches="$(printf "$branches" | sed "s|^$r/||")"
  done
  printf "$branches"
}

list_prs() {
  gh api graphql --cache=5m -F owner='{owner}' -F repo='{repo}' -f query='
    query ($owner: String!, $repo: String!) {
      repository(owner: $owner, name: $repo) {
        pullRequests(last: 100) {
          nodes {
            number
            author {
              login
            }
            state
            headRefName
          }
        }
      }
    }
  ' --template '
    {{- range .data.repository.pullRequests.nodes -}}
      {{- .headRefName | printf "%s\t" -}}
      {{- $stateColor := "green" -}}
      {{- if eq .state "CLOSED" }}{{ $stateColor = "red" }}
      {{- else if eq .state "MERGED" }}{{ $stateColor = "magenta" }}{{ end -}}
      {{- .number | printf "#%.0f" | color $stateColor -}}
      {{- .author.login | printf " by %s\n" -}}
    {{- end -}}
  '
}

find_pr() {
  local head_branch rest
  while IFS=$'\t' read -r head_branch rest; do
    if [ "$1" = "$head_branch" ]; then
      printf "\t%s" "$rest"
      break
    fi
  done
}

render() {
  local branches branch timeago current all_prs
  branches="$(branch_info)" || return 1
  all_prs="$(list_prs 2>/dev/null || true)"
  sort -k2 -r <<<"$branches" | while IFS=$'\t' read -r branch _ timeago current _; do
    [ "$current" = "*" ] && continue
    printf "%s\t%s%s\n" "$branch" "$timeago" "$(find_pr "$branch" <<<"$all_prs")"
  done | tableize
}

tableize() {
  column -t -s$'\t'
}

if [ -n "$static" ]; then
  render
  exit 0
fi

if ! type -p fzf >/dev/null; then
  echo "error: install \`fzf\` to use this command" >&2
  exit 1
fi

choose() {
  local rendered
  rendered="$(render)" || return 1
  #--multi --bind "ctrl-d:execute-silent(git branch -D {+1})+reload(\"$0\" --static)"
  fzf --ansi <<<"$rendered"
}

if [ -n "$remote" ]; then
  git fetch
fi
selected="$(choose)"
[ -n "$selected" ] || exit 1
git checkout "${selected%% *}"
